---
// I'm going to use SSR, because
// the CMS content can change.
export const prerender = false;

import { markdown } from '@astropub/md'
import { getEntries, useContentfulClient } from "../../lib/contentful";
import { getHeroImgId } from "../../lib/contentful";
import Post from "../../layouts/BlogPost.astro";

const { slug } = Astro.params;
let post;

try {
	const isPreview = Astro.request.url.includes('preview');
	const contentfulClient = useContentfulClient(isPreview);
	const data = await getEntries(isPreview, {
		content_type: "markdownPage",
		'fields.slug': slug
	});

	const item = data.items[0];
	const img = await contentfulClient.getAsset(getHeroImgId(item));
	post = {
		title: item.fields.title,
		content: item.fields.content,
		heroImage: img?.fields?.file?.url ?? '',
		description: item.fields.description,
		id: item.sys.id,
		slug: item.fields.slug,
	};
} catch (error) {
	return Astro.redirect("/404");
}

const { content, id, ...data } = post;

// The browser should always check freshness
Astro.response.headers.set("cache-control", "public, max-age=0, must-revalidate");

// The CDN should cache for a year, but revalidate if the cache tag changes
Astro.response.headers.set("netlify-cdn-cache-control", "s-maxage=31536000");

// Tag the page with the version number
Astro.response.headers.set("netlify-cache-tag", id);
---

<Post {...data}>
	{
		await markdown(content as string)
	}
</Post>